{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","box.png","components/Main.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","Component","componentWillMount","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","DStorage","networks","dstorage","Contract","abi","address","methods","fileCount","call","filesCount","i","files","file","state","constructor","props","super","captureFile","event","preventDefault","target","reader","FileReader","readAsArrayBuffer","onloadend","this","buffer","Buffer","result","type","name","console","log","uploadFile","description","add","error","size","loading","hash","send","from","on","reload","e","bind","id","className","Navbar","href","rel","src","box","width","height","alt","substring","Identicon","toString","module","exports","Main","role","style","maxWidth","onSubmit","fileDescription","value","ref","input","placeholder","required","onChange","maxHeight","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash"],"mappings":"sKAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB,o+nGEzHbC,G,OADaC,EAAQ,IACdC,CAAW,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,WAExE,MAAMd,UAAYe,YAEVC,qBAAsB,IAAD,kIACnB,EAAKC,WADc,uBAEnB,EAAKC,qBAFc,6CAKrBD,WAAY,OAAD,wGACXvB,OAAOyB,SADI,uBAEbzB,OAAO0B,KAAO,IAAIC,IAAK3B,OAAOyB,UAFjB,SAGPzB,OAAOyB,SAASG,SAHT,6BAKN5B,OAAO0B,KACd1B,OAAO0B,KAAO,IAAIC,IAAK3B,OAAO0B,KAAKG,iBAGnC7B,OAAO8B,MAAM,uEATA,6CAaXN,qBAAsB,IAAD,6IACnBE,EAAO1B,OAAO0B,KADK,SAGFA,EAAKK,IAAIC,cAHP,cAGnBC,EAHmB,OAIzB,EAAKC,SAAS,CAAEC,QAASF,EAAS,KAJT,SAMDP,EAAKK,IAAIK,IAAIC,QANZ,UAMnBC,EANmB,SAOnBC,EAAcC,EAASC,SAASH,IAPb,wBAUjBI,EAAW,IAAIhB,EAAKK,IAAIY,SAASH,EAASI,IAAKL,EAAYM,SACjE,EAAKX,SAAS,CAAEQ,aAXO,UAaEA,EAASI,QAAQC,YAAYC,OAb/B,QAajBC,EAbiB,OAcvB,EAAKf,SAAS,CAAEe,eAEPC,EAAID,EAhBU,aAgBEC,GAAK,GAhBP,kCAiBFR,EAASI,QAAQK,MAAMD,GAAGF,OAjBxB,QAiBfI,EAjBe,OAkBrB,EAAKlB,SAAS,CACZiB,MAAO,IAAI,EAAKE,MAAMF,MAAOC,KAnBV,QAgBUF,IAhBV,gDAuBvBlD,OAAO8B,MAAM,uDAvBU,8CA2E3BwB,YAAYC,GACVC,MAAMD,GADW,KA/CnBE,YAAcC,IACZA,EAAMC,iBAEN,IAAMP,EAAOM,EAAME,OAAOT,MAAM,GAC1BU,EAAS,IAAI7D,OAAO8D,WAE1BD,EAAOE,kBAAkBX,GACzBS,EAAOG,UAAY,KACjBC,KAAK/B,SAAS,CACZgC,OAAQC,EAAON,EAAOO,QACtBC,KAAMjB,EAAKiB,KACXC,KAAMlB,EAAKkB,OAEbC,QAAQC,IAAI,SAAUP,KAAKZ,MAAMa,UAkClB,KA9BnBO,WAAaC,IACXH,QAAQC,IAAI,8BAGZzD,EAAK4D,IAAIV,KAAKZ,MAAMa,OAAQ,CAACU,EAAOR,KAClCG,QAAQC,IAAI,cAAeJ,EAAOS,MAC/BD,EACDL,QAAQK,MAAMA,IAIhBX,KAAK/B,SAAS,CAAE4C,SAAS,IAEF,KAApBb,KAAKZ,MAAMgB,MACZJ,KAAK/B,SAAS,CAACmC,KAAM,SAEvBJ,KAAKZ,MAAMX,SAASI,QAAQ2B,WAAWL,EAAO,GAAGW,KAAMX,EAAO,GAAGS,KAAMZ,KAAKZ,MAAMgB,KAAMJ,KAAKZ,MAAMiB,KAAMI,GAAaM,KAAK,CAAEC,KAAMhB,KAAKZ,MAAMlB,UAAW+C,GAAG,kBAAoBH,IAC9Kd,KAAK/B,SAAS,CACb4C,SAAS,EACTT,KAAM,KACNC,KAAM,OAERtE,OAAOC,SAASkF,WACdD,GAAG,QAAUE,IACdpF,OAAO8B,MAAM,SACbmC,KAAK/B,SAAS,CAAC4C,SAAS,UAO5Bb,KAAKZ,MAAQ,CACXlB,QAAS,GACTO,SAAU,KACVS,MAAO,GACP2B,SAAS,EACTT,KAAM,KACNC,KAAM,MAERL,KAAKQ,WAAaR,KAAKQ,WAAWY,KAAKpB,MACvCA,KAAKR,YAAcQ,KAAKR,YAAY4B,KAAKpB,MAG3C5D,SACE,OACE,6BACE,kBAAC,IAAD,CAAQ8B,QAAS8B,KAAKZ,MAAMlB,UAC1B8B,KAAKZ,MAAMyB,QACT,yBAAKQ,GAAG,SAASC,UAAU,oBAAmB,0CAC9C,kBAAC,IAAD,CACEpC,MAAOc,KAAKZ,MAAMF,MAClBM,YAAaQ,KAAKR,YAClBgB,WAAYR,KAAKQ,eAQhBnE,Q,yDC1If,wDAKA,MAAMkF,UAAenE,YAEnBhB,SACE,OACE,yBAAKkF,UAAU,iDACb,uBACEA,UAAU,sCACVE,KAAK,wBACL7B,OAAO,SACP8B,IAAI,uBAEJ,yBAAKC,IAAKC,IAAKC,MAAM,KAAKC,OAAO,KAAKP,UAAU,YAAYQ,IAAI,KANlE,YASA,wBAAIR,UAAU,mBACZ,4BACE,2BAAOD,GAAG,WACR,uBAAG1B,OAAO,SACPmC,IAAI,GACJR,UAAU,aACVG,IAAI,sBACJD,KAAM,gCAAkCxB,KAAKV,MAAMpB,SACnD8B,KAAKV,MAAMpB,QAAQ6D,UAAU,EAAE,GALlC,MAKyC/B,KAAKV,MAAMpB,QAAQ6D,UAAU,GAAG,MAGzE/B,KAAKV,MAAMpB,QACT,yBACE4D,IAAI,GACJR,UAAU,OACVM,MAAM,KACNC,OAAO,KACPH,IAAG,gCAA2B,IAAIM,IAAUhC,KAAKV,MAAMpB,QAAS,IAAI+D,cAEtE,mCASDV,O,oBC/CfW,EAAOC,QAAU,IAA0B,iC,2ECK3C,MAAMC,UAAahF,YAEjBhB,SACE,OACE,yBAAKkF,UAAU,oCACb,yBAAKA,UAAU,OACb,0BAAMe,KAAK,OAAOf,UAAU,4BAA4BgB,MAAO,CAAEC,SAAU,WACzE,yBAAKjB,UAAU,WACb,mCACA,yBAAKA,UAAU,4BAA4BgB,MAAO,CAAEC,SAAU,UAC5D,wBAAIjB,UAAU,qCAAoC,2BAAG,6CACnD,0BAAMkB,SAAW/C,IACfA,EAAMC,iBACN,IAAMe,EAAcT,KAAKyC,gBAAgBC,MACzC1C,KAAKV,MAAMkB,WAAWC,KAEpB,yBAAKa,UAAU,cACb,6BACE,2BACED,GAAG,kBACHjB,KAAK,OACLuC,IAAMC,IAAY5C,KAAKyC,gBAAkBG,GACzCtB,UAAU,8BACVuB,YAAY,iBACZC,UAAQ,KAEhB,2BAAO1C,KAAK,OAAO2C,SAAU/C,KAAKV,MAAME,YAAa8B,UAAU,8BAC/D,4BAAQlB,KAAK,SAASkB,UAAU,yBAAwB,yCAG9D,mCACA,2BAAOA,UAAU,yCAAyCgB,MAAO,CAAEV,MAAO,SAAUoB,UAAW,UAC7F,2BAAOV,MAAO,CAAE,SAAY,SAC1B,wBAAIhB,UAAU,sBACZ,wBAAI2B,MAAM,MAAMX,MAAO,CAAEV,MAAO,SAAhC,MACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,UAAhC,QACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,UAAhC,eACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,UAAhC,QACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,SAAhC,QACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,SAAhC,QACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,UAAhC,iBACA,wBAAIqB,MAAM,MAAMX,MAAO,CAAEV,MAAO,UAAhC,mBAGF5B,KAAKV,MAAMJ,MAAMgE,IAAI,CAAC/D,EAAMgE,IAE1B,2BAAOb,MAAO,CAAE,SAAY,QAAUa,IAAKA,GACzC,4BACE,4BAAKhE,EAAKiE,QACV,4BAAKjE,EAAKkE,UACV,4BAAKlE,EAAKsD,iBACV,4BAAKtD,EAAKmE,UACV,4BCzDjB,SAAsBC,GAE1B,GAAc,IAAVA,EAAa,MAAO,SACxB,IAAItE,EAAIuE,SAASC,KAAKC,MAAMD,KAAKlD,IAAIgD,GAASE,KAAKlD,IAAI,QACvD,OAAOkD,KAAKE,MAAMJ,EAAQE,KAAKG,IAAI,KAAM3E,GAAI,GAAK,IAHtC,CAAC,QAAS,KAAM,KAAM,KAAM,MAGsBA,GDqDpC4E,CAAa1E,EAAK2E,WACvB,4BAAKC,IAAOC,KAAK7E,EAAK8E,YAAYC,OAAO,oBACzC,4BACE,uBACE1C,KAAM,gCAAkCrC,EAAKgF,SAC7C1C,IAAI,sBACJ9B,OAAO,UACNR,EAAKgF,SAASpC,UAAU,EAAE,IAJ7B,QAOF,4BACE,uBACEP,KAAM,+BAAiCrC,EAAKiF,SAC5C3C,IAAI,sBACJ9B,OAAO,UACNR,EAAKiF,SAASrC,UAAU,EAAE,IAJ7B,iBAoBXK,O","file":"static/js/main.d1162075.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import DStorage from '../abis/DStorage.json'\nimport React, { Component } from 'react';\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' }) // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = DStorage.networks[networkId]\n    if(networkData) {\n      // Assign contract\n      const dstorage = new web3.eth.Contract(DStorage.abi, networkData.address)\n      this.setState({ dstorage })\n      // Get files amount\n      const filesCount = await dstorage.methods.fileCount().call()\n      this.setState({ filesCount })\n      // Load files&sort by the newest\n      for (var i = filesCount; i >= 1; i--) {\n        const file = await dstorage.methods.files(i).call()\n        this.setState({\n          files: [...this.state.files, file]\n        })\n      }\n    } else {\n      window.alert('DStorage contract not deployed to detected network.')\n    }\n  }\n\n  // Get file from user\n  captureFile = event => {\n    event.preventDefault()\n\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({\n        buffer: Buffer(reader.result),\n        type: file.type,\n        name: file.name\n      })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  uploadFile = description => {\n    console.log(\"Submitting file to IPFS...\")\n\n    // Add file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('IPFS result', result.size)\n      if(error) {\n        console.error(error)\n        return\n      }\n\n      this.setState({ loading: true })\n      // Assign value for the file without extension\n      if(this.state.type === ''){\n        this.setState({type: 'none'})\n      }\n      this.state.dstorage.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({\n         loading: false,\n         type: null,\n         name: null\n       })\n       window.location.reload()\n      }).on('error', (e) =>{\n        window.alert('Error')\n        this.setState({loading: false})\n      })\n    })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      dstorage: null,\n      files: [],\n      loading: false,\n      type: null,\n      name: null\n    }\n    this.uploadFile = this.uploadFile.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              files={this.state.files}\n              captureFile={this.captureFile}\n              uploadFile={this.uploadFile}\n            />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport box from '../box.png';\n\n\nclass Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark p-0 text-monospace\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"http://www.google.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\n          D$t0r@g3\n        </a>\n        <ul className=\"navbar-nav px-3\">\n          <li>\n            <small id=\"account\">\n              <a target=\"_blank\"\n                 alt=\"\"\n                 className=\"text-white\"\n                 rel=\"noopener noreferrer\"\n                 href={\"https://etherscan.io/address/\" + this.props.account}>\n                {this.props.account.substring(0,6)}...{this.props.account.substring(38,42)}\n              </a>\n            </small>\n            { this.props.account\n              ? <img\n                  alt=\"\"\n                  className='ml-2'\n                  width='30'\n                  height='30'\n                  src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\n                />\n              : <span></span>\n            }\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;","module.exports = __webpack_public_path__ + \"static/media/box.df8b84d5.png\";","import React, { Component } from 'react';\nimport { convertBytes } from './helpers';\nimport moment from 'moment';\n\n\nclass Main extends Component {\n\n  render() {\n    return (\n      <div className=\"container-fluid mt-5 text-center\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\n            <div className=\"content\">\n              <p>&nbsp;</p>\n              <div className=\"card mb-3 mx-auto bg-dark\" style={{ maxWidth: '512px' }}>\n                <h2 className=\"text-white text-monospace bg-dark\"><b><ins>Share File</ins></b></h2>\n                  <form onSubmit={(event) => {\n                    event.preventDefault()\n                    const description = this.fileDescription.value\n                    this.props.uploadFile(description)\n                  }} >\n                      <div className=\"form-group\">\n                        <br></br>\n                          <input\n                            id=\"fileDescription\"\n                            type=\"text\"\n                            ref={(input) => { this.fileDescription = input }}\n                            className=\"form-control text-monospace\"\n                            placeholder=\"description...\"\n                            required />\n                      </div>\n                    <input type=\"file\" onChange={this.props.captureFile} className=\"text-white text-monospace\"/>\n                    <button type=\"submit\" className=\"btn-primary btn-block\"><b>Upload!</b></button>\n                  </form>\n              </div>\n              <p>&nbsp;</p>\n              <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px'}}>\n                <thead style={{ 'fontSize': '15px' }}>\n                  <tr className=\"bg-dark text-white\">\n                    <th scope=\"col\" style={{ width: '10px'}}>id</th>\n                    <th scope=\"col\" style={{ width: '200px'}}>name</th>\n                    <th scope=\"col\" style={{ width: '230px'}}>description</th>\n                    <th scope=\"col\" style={{ width: '120px'}}>type</th>\n                    <th scope=\"col\" style={{ width: '90px'}}>size</th>\n                    <th scope=\"col\" style={{ width: '90px'}}>date</th>\n                    <th scope=\"col\" style={{ width: '120px'}}>uploader/view</th>\n                    <th scope=\"col\" style={{ width: '120px'}}>hash/view/get</th>\n                  </tr>\n                </thead>\n                { this.props.files.map((file, key) => {\n                  return(\n                    <thead style={{ 'fontSize': '12px' }} key={key}>\n                      <tr>\n                        <td>{file.fileId}</td>\n                        <td>{file.fileName}</td>\n                        <td>{file.fileDescription}</td>\n                        <td>{file.fileType}</td>\n                        <td>{convertBytes(file.fileSize)}</td>\n                        <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\n                        <td>\n                          <a\n                            href={\"https://etherscan.io/address/\" + file.uploader}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\">\n                            {file.uploader.substring(0,10)}...\n                          </a>\n                         </td>\n                        <td>\n                          <a\n                            href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\n                            rel=\"noopener noreferrer\"\n                            target=\"_blank\">\n                            {file.fileHash.substring(0,10)}...\n                          </a>\n                        </td>\n                      </tr>\n                    </thead>\n                  )\n                })}\n              </table>\n            </div>\n          </main>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}